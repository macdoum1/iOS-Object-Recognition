<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AmazonDynamoDBClient.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AmazonDynamoDBClient</TokenIdentifier>
			<Abstract type="html">&lt;summary&gt;
Interface for accessing AmazonDynamoDB.</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/scan:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
The &lt;i&gt;Scan&lt;/i&gt; operation returns one or more items and item attributes by accessing every item in the table. To have
Amazon DynamoDB return fewer items, you can provide a &lt;i&gt;ScanFilter&lt;/i&gt; .
&lt;/p&gt;
&lt;p&gt;
If the total number of scanned items exceeds the maximum data set size limit of 1 MB, the scan stops and results are
returned to the user with a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to continue the scan in a subsequent operation. The results also
include the number of items exceeding the limit. A scan can result in no table data meeting the filter criteria.
&lt;/p&gt;
&lt;p&gt;
The result set is eventually consistent.
&lt;/p&gt;
&lt;p&gt;
By default, &lt;i&gt;Scan&lt;/i&gt; operations proceed sequentially; however, for faster performance on large tables, applications
can request a parallel &lt;i&gt;Scan&lt;/i&gt; by specifying the &lt;i&gt;Segment&lt;/i&gt; and &lt;i&gt;TotalSegments&lt;/i&gt; parameters. For more
information, see 
Parallel Scan  in the Amazon DynamoDB Developer Guide.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBScanRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBScanResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBScanResponse *)scan:(DynamoDBScanRequest *)scanRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>scanRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the Scan service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the Scan service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/scan:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/updateTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Updates the provisioned throughput for the given table. Setting the throughput for a table helps you manage performance
and is part of the provisioned throughput feature of Amazon DynamoDB.
&lt;/p&gt;
&lt;p&gt;
The provisioned throughput values can be upgraded or downgraded based on the maximums and minimums listed in the  Limits  section in the Amazon
DynamoDB Developer Guide.
&lt;/p&gt;
&lt;p&gt;
The table must be in the ACTIVE state for this operation to succeed. &lt;i&gt;UpdateTable&lt;/i&gt; is an asynchronous operation;
while executing the operation, the table is in the UPDATING state. While the table is in the UPDATING state, the table
still has the provisioned throughput from before the call. The new provisioned throughput setting is in effect only when
the table returns to the ACTIVE state after the &lt;i&gt;UpdateTable&lt;/i&gt; operation.
&lt;/p&gt;
&lt;p&gt;
You cannot add, modify or delete local secondary indexes using &lt;i&gt;UpdateTable&lt;/i&gt; . Local secondary indexes can only be
defined at table creation time.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBUpdateTableResponse *)updateTable:(DynamoDBUpdateTableRequest *)updateTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>updateTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the UpdateTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the UpdateTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/updateTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/deleteTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
The &lt;i&gt;DeleteTable&lt;/i&gt; operation deletes a table and all of its items. After a &lt;i&gt;DeleteTable&lt;/i&gt; request, the specified
table is in the DELETING state until Amazon DynamoDB completes the deletion. If the table is in the ACTIVE state, you
can delete it. If a table is in CREATING or UPDATING states, then Amazon DynamoDB returns a
&lt;i&gt;ResourceInUseException&lt;/i&gt; . If the specified table does not exist, Amazon DynamoDB returns a
&lt;i&gt;ResourceNotFoundException&lt;/i&gt; . If table is already in the DELETING state, no error is returned.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; Amazon DynamoDB might continue to accept data read and write operations, such as GetItem and PutItem, on a
table in the DELETING state until the table deletion is complete.
&lt;/p&gt;
&lt;p&gt;
When you delete a table, any local secondary indexes on that table are also deleted.
&lt;/p&gt;
&lt;p&gt;
Use the &lt;i&gt;DescribeTable&lt;/i&gt; API to check the status of the table.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBDeleteTableResponse *)deleteTable:(DynamoDBDeleteTableRequest *)deleteTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>deleteTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the DeleteTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the DeleteTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/batchWriteItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
The &lt;i&gt;BatchWriteItem&lt;/i&gt; operation puts or deletes multiple items in one or more tables. A single call to
&lt;i&gt;BatchWriteItem&lt;/i&gt; can write up to 1 MB of data, which can comprise as many as 25 put or delete requests. Individual
items to be written can be as large as 64 KB.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; BatchWriteItem cannot update items. To update items, use the UpdateItem API.
&lt;/p&gt;
&lt;p&gt;
The individual &lt;i&gt;PutItem&lt;/i&gt; and &lt;i&gt;DeleteItem&lt;/i&gt; operations specified in &lt;i&gt;BatchWriteItem&lt;/i&gt; are atomic; however
&lt;i&gt;BatchWriteItem&lt;/i&gt; as a whole is not. If any requested operations fail because the table&apos;s provisioned throughput is
exceeded or an internal processing failure occurs, the failed operations are returned in the &lt;i&gt;UnprocessedItems&lt;/i&gt;
response parameter. You can investigate and optionally resend the requests. Typically, you would call
&lt;i&gt;BatchWriteItem&lt;/i&gt; in a loop. Each iteration would check for unprocessed items and submit a new &lt;i&gt;BatchWriteItem&lt;/i&gt;
request with those unprocessed items until all items have been processed.
&lt;/p&gt;
&lt;p&gt;
To write one item, you can use the &lt;i&gt;PutItem&lt;/i&gt; operation; to delete one item, you can use the &lt;i&gt;DeleteItem&lt;/i&gt;
operation.
&lt;/p&gt;
&lt;p&gt;
With &lt;i&gt;BatchWriteItem&lt;/i&gt; , you can efficiently write or delete large amounts of data, such as from Amazon Elastic
MapReduce (EMR), or copy data from another database into Amazon DynamoDB. In order to improve performance with these
large-scale operations, &lt;i&gt;BatchWriteItem&lt;/i&gt; does not behave in the same way as individual &lt;i&gt;PutItem&lt;/i&gt; and
&lt;i&gt;DeleteItem&lt;/i&gt; calls would For example, you cannot specify conditions on individual put and delete requests, and
&lt;i&gt;BatchWriteItem&lt;/i&gt; does not return deleted items in the response.
&lt;/p&gt;
&lt;p&gt;
If you use a programming language that supports concurrency, such as Java, you can use threads to write items in
parallel. Your application must include the necessary logic to manage the threads.
&lt;/p&gt;
&lt;p&gt;
With languages that don&apos;t support threading, such as PHP, &lt;i&gt;BatchWriteItem&lt;/i&gt; will write or delete the specified items
one at a time. In both situations, &lt;i&gt;BatchWriteItem&lt;/i&gt; provides an alternative where the API performs the specified
put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce
complexity into your application.
&lt;/p&gt;
&lt;p&gt;
Parallel processing reduces latency, but each specified put and delete request consumes the same number of write
capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write
capacity unit.
&lt;/p&gt;
&lt;p&gt;
If one or more of the following is true, Amazon DynamoDB rejects the entire batch write operation:
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchWriteItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchWriteItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBBatchWriteItemResponse *)batchWriteItem:(DynamoDBBatchWriteItemRequest *)batchWriteItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>batchWriteItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the BatchWriteItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the BatchWriteItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/batchWriteItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/describeTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Returns information about the table, including the current status of the table, when it was created, the primary key
schema, and any indexes on the table.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDescribeTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDescribeTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBDescribeTableResponse *)describeTable:(DynamoDBDescribeTableRequest *)describeTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>describeTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the DescribeTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the DescribeTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/describeTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/getItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
The &lt;i&gt;GetItem&lt;/i&gt; operation returns a set of attributes for the item with the given primary key. If there is no
matching item, &lt;i&gt;GetItem&lt;/i&gt; does not return any data.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;GetItem&lt;/i&gt; provides an eventually consistent read by default. If your application requires a strongly consistent
read, set &lt;i&gt;ConsistentRead&lt;/i&gt; to true . Although a strongly consistent read might take more time than an eventually
consistent read, it always returns the last updated value.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBGetItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBGetItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBGetItemResponse *)getItem:(DynamoDBGetItemRequest *)getItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>getItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the GetItem service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the GetItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/getItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/deleteItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Deletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if
it exists, or if it has an expected attribute value.
&lt;/p&gt;
&lt;p&gt;
In addition to deleting an item, you can also return the item&apos;s attribute values in the same operation, using the
&lt;i&gt;ReturnValues&lt;/i&gt; parameter.
&lt;/p&gt;
&lt;p&gt;
Unless you specify conditions, the &lt;i&gt;DeleteItem&lt;/i&gt; is an idempotent operation; running it multiple times on the same
item or attribute does &lt;i&gt;not&lt;/i&gt; result in an error response.
&lt;/p&gt;
&lt;p&gt;
Conditional deletes are useful for only deleting items if specific conditions are met. If those conditions are met,
Amazon DynamoDB performs the delete. Otherwise, the item is not deleted.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBDeleteItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBDeleteItemResponse *)deleteItem:(DynamoDBDeleteItemRequest *)deleteItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>deleteItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the DeleteItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the DeleteItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/createTable:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
The &lt;i&gt;CreateTable&lt;/i&gt; operation adds a new table to your account. In an AWS account, table names must be unique within
each region. That is, you can have two tables with same name if you create the tables in different regions.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;CreateTable&lt;/i&gt; is an asynchronous operation. Upon receiving a &lt;i&gt;CreateTable&lt;/i&gt; request, Amazon DynamoDB
immediately returns a response with a &lt;i&gt;TableStatus&lt;/i&gt; of CREATING . After the table is created, Amazon DynamoDB sets
the &lt;i&gt;TableStatus&lt;/i&gt; to ACTIVE . You can perform read and write operations only on an ACTIVE table.
&lt;/p&gt;
&lt;p&gt;
If you want to create multiple tables with local secondary indexes on them, you must create them sequentially. Only one
table with local secondary indexes can be in the CREATING state at any given time.
&lt;/p&gt;
&lt;p&gt;
You can use the &lt;i&gt;DescribeTable&lt;/i&gt; API to check the table status.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBCreateTableRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBCreateTableResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBCreateTableResponse *)createTable:(DynamoDBCreateTableRequest *)createTableRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>createTableRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the CreateTable service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the CreateTable service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/createTable:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/query:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
A &lt;i&gt;Query&lt;/i&gt; operation directly accesses items from a table using the table primary key, or from an index using the
index key. You must provide a specific hash key value. You can narrow the scope of the query by using comparison
operators on the range key value, or on the index key. You can use the &lt;i&gt;ScanIndexForward&lt;/i&gt; parameter to get results
in forward or reverse order, by range key or by index key.
&lt;/p&gt;
&lt;p&gt;
Queries that do not return results consume the minimum read capacity units according to the type of read.
&lt;/p&gt;
&lt;p&gt;
If the total number of items meeting the query criteria exceeds the result set size limit of 1 MB, the query stops and
results are returned to the user with a &lt;i&gt;LastEvaluatedKey&lt;/i&gt; to continue the query in a subsequent operation. Unlike
a &lt;i&gt;Scan&lt;/i&gt; operation, a &lt;i&gt;Query&lt;/i&gt; operation never returns an empty result set &lt;i&gt;and&lt;/i&gt; a
&lt;i&gt;LastEvaluatedKey&lt;/i&gt; . The &lt;i&gt;LastEvaluatedKey&lt;/i&gt; is only provided if the results exceed 1 MB,
or if you have used &lt;i&gt;Limit&lt;/i&gt; .
&lt;/p&gt;
&lt;p&gt;
To request a strongly consistent result, set &lt;i&gt;ConsistentRead&lt;/i&gt; to true.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBQueryRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBQueryResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBQueryResponse *)query:(DynamoDBQueryRequest *)queryRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>queryRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the Query service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the Query service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/query:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/putItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Creates a new item, or replaces an old item with a new item. If an item already exists in the specified table with the
same primary key, the new item completely replaces the existing item. You can perform a conditional put (insert a new
item if one with the specified primary key doesn&apos;t exist), or replace an existing item if it has certain attribute
values.
&lt;/p&gt;
&lt;p&gt;
In addition to putting an item, you can also return the item&apos;s attribute values in the same operation, using the
&lt;i&gt;ReturnValues&lt;/i&gt; parameter.
&lt;/p&gt;
&lt;p&gt;
When you add an item, the primary key attribute(s) are the only required attributes. Attribute values cannot be null.
String and binary type attributes must have lengths greater than zero. Set type attributes cannot be empty. Requests
with empty values will be rejected with a &lt;i&gt;ValidationException&lt;/i&gt; .
&lt;/p&gt;
&lt;p&gt;
You can request that &lt;i&gt;PutItem&lt;/i&gt; return either a copy of the old item (before the update) or a copy of the new item
(after the update). For more information, see the &lt;i&gt;ReturnValues&lt;/i&gt; description.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;NOTE:&lt;/b&gt; To prevent a new item from replacing an existing item, use a conditional put operation with Exists set to
false for the primary key attribute, or attributes.
&lt;/p&gt;
&lt;p&gt;
For more information about using this API, see  Working with Items 
in the Amazon DynamoDB Developer Guide.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBPutItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBPutItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBPutItemResponse *)putItem:(DynamoDBPutItemRequest *)putItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>putItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the PutItem service method on AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the PutItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/putItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/listTables:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Returns an array of all the tables associated with the current account and endpoint.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBListTablesRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBListTablesResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBListTablesResponse *)listTables:(DynamoDBListTablesRequest *)listTablesRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>listTablesRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the ListTables service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the ListTables service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/listTables:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/updateItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
Edits an existing item&apos;s attributes, or inserts a new item if it does not already exist. You can put, delete, or add
attribute values. You can also perform a conditional update (insert a new attribute name-value pair if it doesn&apos;t exist,
or replace an existing name-value pair if it has certain expected attribute values).
&lt;/p&gt;
&lt;p&gt;
In addition to updating an item, you can also return the item&apos;s attribute values in the same operation, using the
&lt;i&gt;ReturnValues&lt;/i&gt; parameter.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBUpdateItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBUpdateItemResponse *)updateItem:(DynamoDBUpdateItemRequest *)updateItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>updateItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the UpdateItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the UpdateItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/updateItem:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AmazonDynamoDBClient/batchGetItem:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;
The &lt;i&gt;BatchGetItem&lt;/i&gt; operation returns the attributes of one or more items from one or more tables. You identify
requested items by primary key.
&lt;/p&gt;
&lt;p&gt;
A single operation can retrieve up to 1 MB of data, which can comprise as many as 100 items. &lt;i&gt;BatchGetItem&lt;/i&gt; will
return a partial result if the response size limit is exceeded, the table&apos;s provisioned throughput is exceeded, or an
internal processing failure occurs. If a partial result is returned, the operation returns a value for
&lt;i&gt;UnprocessedKeys&lt;/i&gt; . You can use this value to retry the operation starting with the next item to get.
&lt;/p&gt;
&lt;p&gt;
For example, if you ask to retrieve 100 items, but each individual item is 50 KB in size, the system returns 20 items (1
MB) and an appropriate &lt;i&gt;UnprocessedKeys&lt;/i&gt; value so you can get the next page of results. If desired, your
application can include its own logic to assemble the pages of results into one dataset.
&lt;/p&gt;
&lt;p&gt;
If no items can be processed because of insufficient provisioned throughput on each of the tables involved in the
request, &lt;i&gt;BatchGetItem&lt;/i&gt; throws &lt;i&gt;ProvisionedThroughputExceededException&lt;/i&gt; .
&lt;/p&gt;
&lt;p&gt;
By default, &lt;i&gt;BatchGetItem&lt;/i&gt; performs eventually consistent reads on every table in the request. If you want strongly
consistent reads instead, you can set &lt;i&gt;ConsistentRead&lt;/i&gt; to true for any or all tables.
&lt;/p&gt;
&lt;p&gt;
In order to minimize response latency, &lt;i&gt;BatchGetItem&lt;/i&gt; fetches items in parallel.
&lt;/p&gt;
&lt;p&gt;
When designing your application, keep in mind that Amazon DynamoDB does not return attributes in any particular order.
To help parse the response by item, include the primary key values for the items in your request in the
&lt;i&gt;AttributesToGet&lt;/i&gt; parameter.
&lt;/p&gt;
&lt;p&gt;
If a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum
read capacity units according to the type of read. For more information, see &lt;a
ref=&quot;http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithDDTables.html#CapacityUnitCalculations&quot;&gt;
Capacity Units Calculations &lt;/a&gt; in the Amazon DynamoDB Developer Guide.
&lt;/p&gt;</Abstract>
			<DeclaredIn>AmazonDynamoDBClient.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchGetItemRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchGetItemResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (DynamoDBBatchGetItemResponse *)batchGetItem:(DynamoDBBatchGetItemRequest *)batchGetItemRequest</Declaration>
			<Parameters>
				<Parameter>
					<Name>batchGetItemRequest</Name>
					<Abstract type="html">Container for the necessary parameters to execute the BatchGetItem service method on
AmazonDynamoDB.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The response from the BatchGetItem service method, as returned by AmazonDynamoDB.</Abstract></ReturnValue>
			<Anchor>//api/name/batchGetItem:</Anchor>
		</Token>
		
	</File>
</Tokens>