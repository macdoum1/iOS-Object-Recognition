<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/EC2AuthorizeSecurityGroupIngressRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/EC2AuthorizeSecurityGroupIngressRequest</TokenIdentifier>
			<Abstract type="html">Authorize Security Group Ingress Request</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>
			
			<NodeRef refid="231"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setDryRun:</TokenIdentifier>
			<Abstract type="html">The value of the DryRun property for this object.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL dryRun</Declaration>
			
			
			<Anchor>//api/name/dryRun</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/dryRun</TokenIdentifier>
			<Abstract type="html">The value of the DryRun property for this object.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL dryRun</Declaration>
			
			
			<Anchor>//api/name/dryRun</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setGroupName:</TokenIdentifier>
			<Abstract type="html">Name of the standard (EC2) security group to modify. The group must
belong to your account. Can be used instead of GroupID for standard
(EC2) security groups.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *groupName</Declaration>
			
			
			<Anchor>//api/name/groupName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/groupName</TokenIdentifier>
			<Abstract type="html">Name of the standard (EC2) security group to modify. The group must
belong to your account. Can be used instead of GroupID for standard
(EC2) security groups.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *groupName</Declaration>
			
			
			<Anchor>//api/name/groupName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setGroupId:</TokenIdentifier>
			<Abstract type="html">ID of the standard (EC2) or VPC security group to modify. The group
must belong to your account. Required for VPC security groups; can be
used instead of GroupName for standard (EC2) security groups.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *groupId</Declaration>
			
			
			<Anchor>//api/name/groupId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/groupId</TokenIdentifier>
			<Abstract type="html">ID of the standard (EC2) or VPC security group to modify. The group
must belong to your account. Required for VPC security groups; can be
used instead of GroupName for standard (EC2) security groups.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *groupId</Declaration>
			
			
			<Anchor>//api/name/groupId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setSourceSecurityGroupName:</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *sourceSecurityGroupName</Declaration>
			
			
			<Anchor>//api/name/sourceSecurityGroupName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/sourceSecurityGroupName</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *sourceSecurityGroupName</Declaration>
			
			
			<Anchor>//api/name/sourceSecurityGroupName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setSourceSecurityGroupOwnerId:</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *sourceSecurityGroupOwnerId</Declaration>
			
			
			<Anchor>//api/name/sourceSecurityGroupOwnerId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/sourceSecurityGroupOwnerId</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *sourceSecurityGroupOwnerId</Declaration>
			
			
			<Anchor>//api/name/sourceSecurityGroupOwnerId</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setIpProtocol:</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *ipProtocol</Declaration>
			
			
			<Anchor>//api/name/ipProtocol</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/ipProtocol</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *ipProtocol</Declaration>
			
			
			<Anchor>//api/name/ipProtocol</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setFromPort:</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *fromPort</Declaration>
			
			
			<Anchor>//api/name/fromPort</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/fromPort</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *fromPort</Declaration>
			
			
			<Anchor>//api/name/fromPort</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setToPort:</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *toPort</Declaration>
			
			
			<Anchor>//api/name/toPort</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/toPort</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *toPort</Declaration>
			
			
			<Anchor>//api/name/toPort</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setCidrIp:</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *cidrIp</Declaration>
			
			
			<Anchor>//api/name/cidrIp</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/cidrIp</TokenIdentifier>
			<Abstract type="html">Deprecated</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *cidrIp</Declaration>
			
			
			<Anchor>//api/name/cidrIp</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/setIpPermissions:</TokenIdentifier>
			<Abstract type="html">List of IP permissions to authorize on the specified security group.
Specifying permissions through IP permissions is the preferred way of
authorizing permissions since it offers more flexibility and control.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *ipPermissions</Declaration>
			
			
			<Anchor>//api/name/ipPermissions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/EC2AuthorizeSecurityGroupIngressRequest/ipPermissions</TokenIdentifier>
			<Abstract type="html">List of IP permissions to authorize on the specified security group.
Specifying permissions through IP permissions is the preferred way of
authorizing permissions since it offers more flexibility and control.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *ipPermissions</Declaration>
			
			
			<Anchor>//api/name/ipPermissions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/init</TokenIdentifier>
			<Abstract type="html">Default constructor for a new AuthorizeSecurityGroupIngressRequest object.  Callers should use the
property methods to initialize this object after creating it.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/initWithGroupName:andIpPermissions:</TokenIdentifier>
			<Abstract type="html">Constructs a new AuthorizeSecurityGroupIngressRequest object.
Callers should use properties to initialize any additional object members.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>- (id)initWithGroupName:(NSString *)theGroupName andIpPermissions:(NSMutableArray *)theIpPermissions</Declaration>
			<Parameters>
				<Parameter>
					<Name>theGroupName</Name>
					<Abstract type="html">Name of the standard (EC2) security group to
modify. The group must belong to your account. Can be used instead of
GroupID for standard (EC2) security groups.</Abstract>
				</Parameter><Parameter>
					<Name>theIpPermissions</Name>
					<Abstract type="html">List of IP permissions to authorize on the
specified security group. Specifying permissions through IP
permissions is the preferred way of authorizing permissions since it
offers more flexibility and control.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithGroupName:andIpPermissions:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/addIpPermission:</TokenIdentifier>
			<Abstract type="html">Adds a single object to ipPermissions.
This function will alloc and init ipPermissions if not already done.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>- (void)addIpPermission:(EC2IpPermission *)ipPermissionObject</Declaration>
			
			
			<Anchor>//api/name/addIpPermission:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/EC2AuthorizeSecurityGroupIngressRequest/description</TokenIdentifier>
			<Abstract type="html">Returns a string representation of this object; useful for testing and
debugging.</Abstract>
			<DeclaredIn>EC2AuthorizeSecurityGroupIngressRequest.h</DeclaredIn>			
			
			<Declaration>- (NSString *)description</Declaration>
			
			<ReturnValue><Abstract type="html">A string representation of this object.</Abstract></ReturnValue>
			<Anchor>//api/name/description</Anchor>
		</Token>
		
	</File>
</Tokens>