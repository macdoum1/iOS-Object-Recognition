<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DynamoDBBatchWriteItemResponse.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DynamoDBBatchWriteItemResponse</TokenIdentifier>
			<Abstract type="html">Batch Write Item Result</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>
			
			<NodeRef refid="173"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/setException:</TokenIdentifier>
			<Abstract type="html">If an exception was thrown, this will return the exception.</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>- (void)setException:(AmazonServiceException *)theException</Declaration>
			
			
			<Anchor>//api/name/setException:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/init</TokenIdentifier>
			<Abstract type="html">Default constructor for a new  object.  Callers should use the
property methods to initialize this object after creating it.</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/setUnprocessedItems:</TokenIdentifier>
			<Abstract type="html">A map of tables and requests against those tables that were not
processed. The &lt;i&gt;UnprocessedKeys&lt;/i&gt; value is in the same form as
&lt;i&gt;RequestItems&lt;/i&gt;, so you can provide this value directly to a
subsequent &lt;i&gt;BatchGetItem&lt;/i&gt; operation. For more information, see
&lt;i&gt;RequestItems&lt;/i&gt; in the Request Parameters section. &lt;p&gt;Each
&lt;i&gt;UnprocessedItems&lt;/i&gt; entry consists of a table name and, for that
table, a list of operations to perform (&lt;i&gt;DeleteRequest&lt;/i&gt; or
&lt;i&gt;PutRequest&lt;/i&gt;). &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;DeleteRequest&lt;/i&gt; - Perform a
&lt;i&gt;DeleteItem&lt;/i&gt; operation on the specified item. The item to be
deleted is identified by a &lt;i&gt;Key&lt;/i&gt; subelement: &lt;ul&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;Key&lt;/i&gt; - A map of primary key attribute values that uniquely
identify the item. Each entry in this map consists of an attribute
name and an attribute value. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;PutRequest&lt;/i&gt; - Perform a &lt;i&gt;PutItem&lt;/i&gt; operation on the
specified item. The item to be put is identified by an &lt;i&gt;Item&lt;/i&gt;
subelement: &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;Item&lt;/i&gt; - A map of attributes and their
values. Each entry in this map consists of an attribute name and an
attribute value. Attribute values must not be null; string and binary
type attributes must have lengths greater than zero; and set type
attributes must not be empty. Requests that contain empty values will
be rejected with a &lt;i&gt;ValidationException&lt;/i&gt;. &lt;p&gt;If you specify any
attributes that are part of an index key, then the data types for
those attributes must match those of the schema in the table&apos;s
attribute definition.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;1 - 25&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *unprocessedItems</Declaration>
			
			
			<Anchor>//api/name/unprocessedItems</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBBatchWriteItemResponse/unprocessedItems</TokenIdentifier>
			<Abstract type="html">A map of tables and requests against those tables that were not
processed. The &lt;i&gt;UnprocessedKeys&lt;/i&gt; value is in the same form as
&lt;i&gt;RequestItems&lt;/i&gt;, so you can provide this value directly to a
subsequent &lt;i&gt;BatchGetItem&lt;/i&gt; operation. For more information, see
&lt;i&gt;RequestItems&lt;/i&gt; in the Request Parameters section. &lt;p&gt;Each
&lt;i&gt;UnprocessedItems&lt;/i&gt; entry consists of a table name and, for that
table, a list of operations to perform (&lt;i&gt;DeleteRequest&lt;/i&gt; or
&lt;i&gt;PutRequest&lt;/i&gt;). &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;DeleteRequest&lt;/i&gt; - Perform a
&lt;i&gt;DeleteItem&lt;/i&gt; operation on the specified item. The item to be
deleted is identified by a &lt;i&gt;Key&lt;/i&gt; subelement: &lt;ul&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;Key&lt;/i&gt; - A map of primary key attribute values that uniquely
identify the item. Each entry in this map consists of an attribute
name and an attribute value. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;PutRequest&lt;/i&gt; - Perform a &lt;i&gt;PutItem&lt;/i&gt; operation on the
specified item. The item to be put is identified by an &lt;i&gt;Item&lt;/i&gt;
subelement: &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;Item&lt;/i&gt; - A map of attributes and their
values. Each entry in this map consists of an attribute name and an
attribute value. Attribute values must not be null; string and binary
type attributes must have lengths greater than zero; and set type
attributes must not be empty. Requests that contain empty values will
be rejected with a &lt;i&gt;ValidationException&lt;/i&gt;. &lt;p&gt;If you specify any
attributes that are part of an index key, then the data types for
those attributes must match those of the schema in the table&apos;s
attribute definition.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;1 - 25&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *unprocessedItems</Declaration>
			
			
			<Anchor>//api/name/unprocessedItems</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/setItemCollectionMetrics:</TokenIdentifier>
			<Abstract type="html">A list of tables that were processed by &lt;i&gt;BatchWriteItem&lt;/i&gt; and, for
each table, information about any item collections that were affected
by individual &lt;i&gt;DeleteItem&lt;/i&gt; or &lt;i&gt;PutItem&lt;/i&gt; operations. &lt;p&gt;Each
entry consists of the following subelements: &lt;ul&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;ItemCollectionKey&lt;/i&gt; - The hash key value of the item
collection. This is the same as the hash key of the item. &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;SizeEstimateRange&lt;/i&gt; - An estimate of item collection size,
expressed in GB. This is a two-element array containing a lower bound
and an upper bound for the estimate. The estimate includes the size of
all the items in the table, plus the size of all attributes projected
into all of the secondary indexes on the table. Use this estimate to
measure whether a secondary index is approaching its size limit.
&lt;p&gt;The estimate is subject to change over time; therefore, do not rely
on the precision or accuracy of the estimate. &lt;/li&gt; &lt;/ul&gt;</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *itemCollectionMetrics</Declaration>
			
			
			<Anchor>//api/name/itemCollectionMetrics</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBBatchWriteItemResponse/itemCollectionMetrics</TokenIdentifier>
			<Abstract type="html">A list of tables that were processed by &lt;i&gt;BatchWriteItem&lt;/i&gt; and, for
each table, information about any item collections that were affected
by individual &lt;i&gt;DeleteItem&lt;/i&gt; or &lt;i&gt;PutItem&lt;/i&gt; operations. &lt;p&gt;Each
entry consists of the following subelements: &lt;ul&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;ItemCollectionKey&lt;/i&gt; - The hash key value of the item
collection. This is the same as the hash key of the item. &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;i&gt;SizeEstimateRange&lt;/i&gt; - An estimate of item collection size,
expressed in GB. This is a two-element array containing a lower bound
and an upper bound for the estimate. The estimate includes the size of
all the items in the table, plus the size of all attributes projected
into all of the secondary indexes on the table. Use this estimate to
measure whether a secondary index is approaching its size limit.
&lt;p&gt;The estimate is subject to change over time; therefore, do not rely
on the precision or accuracy of the estimate. &lt;/li&gt; &lt;/ul&gt;</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *itemCollectionMetrics</Declaration>
			
			
			<Anchor>//api/name/itemCollectionMetrics</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/setConsumedCapacity:</TokenIdentifier>
			<Abstract type="html">The capacity units consumed by the operation. &lt;p&gt;Each element consists
of: &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;TableName&lt;/i&gt; - The table that consumed the
provisioned throughput. &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;CapacityUnits&lt;/i&gt; - The total
number of capacity units consumed. &lt;/li&gt; &lt;/ul&gt;</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *consumedCapacity</Declaration>
			
			
			<Anchor>//api/name/consumedCapacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBBatchWriteItemResponse/consumedCapacity</TokenIdentifier>
			<Abstract type="html">The capacity units consumed by the operation. &lt;p&gt;Each element consists
of: &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;TableName&lt;/i&gt; - The table that consumed the
provisioned throughput. &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;i&gt;CapacityUnits&lt;/i&gt; - The total
number of capacity units consumed. &lt;/li&gt; &lt;/ul&gt;</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *consumedCapacity</Declaration>
			
			
			<Anchor>//api/name/consumedCapacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/unprocessedItemsValueForKey:</TokenIdentifier>
			<Abstract type="html">Returns a value from the unprocessedItems dictionary for the specified key.</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)unprocessedItemsValueForKey:(NSString *)theKey</Declaration>
			
			
			<Anchor>//api/name/unprocessedItemsValueForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/itemCollectionMetricsValueForKey:</TokenIdentifier>
			<Abstract type="html">Returns a value from the itemCollectionMetrics dictionary for the specified key.</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)itemCollectionMetricsValueForKey:(NSString *)theKey</Declaration>
			
			
			<Anchor>//api/name/itemCollectionMetricsValueForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/consumedCapacityObjectAtIndex:</TokenIdentifier>
			<Abstract type="html">Returns a value from the consumedCapacity array for the specified index</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>- (DynamoDBConsumedCapacity *)consumedCapacityObjectAtIndex:(int)index</Declaration>
			
			
			<Anchor>//api/name/consumedCapacityObjectAtIndex:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBBatchWriteItemResponse/description</TokenIdentifier>
			<Abstract type="html">Returns a string representation of this object; useful for testing and
debugging.</Abstract>
			<DeclaredIn>DynamoDBBatchWriteItemResponse.h</DeclaredIn>			
			
			<Declaration>- (NSString *)description</Declaration>
			
			<ReturnValue><Abstract type="html">A string representation of this object.</Abstract></ReturnValue>
			<Anchor>//api/name/description</Anchor>
		</Token>
		
	</File>
</Tokens>