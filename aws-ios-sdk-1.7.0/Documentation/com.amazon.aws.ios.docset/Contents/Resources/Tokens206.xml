<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/DynamoDBQueryRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/DynamoDBQueryRequest</TokenIdentifier>
			<Abstract type="html">Query Request</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>
			
			<NodeRef refid="206"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setTableName:</TokenIdentifier>
			<Abstract type="html">The name of the table containing the requested items.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;3 - 255&lt;br/&gt;
&lt;b&gt;Pattern: &lt;/b&gt;[a-zA-Z0-9_.-]+&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/tableName</TokenIdentifier>
			<Abstract type="html">The name of the table containing the requested items.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;3 - 255&lt;br/&gt;
&lt;b&gt;Pattern: &lt;/b&gt;[a-zA-Z0-9_.-]+&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *tableName</Declaration>
			
			
			<Anchor>//api/name/tableName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setIndexName:</TokenIdentifier>
			<Abstract type="html">The name of an index on the table to query.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;3 - 255&lt;br/&gt;
&lt;b&gt;Pattern: &lt;/b&gt;[a-zA-Z0-9_.-]+&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/indexName</TokenIdentifier>
			<Abstract type="html">The name of an index on the table to query.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;3 - 255&lt;br/&gt;
&lt;b&gt;Pattern: &lt;/b&gt;[a-zA-Z0-9_.-]+&lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setSelect:</TokenIdentifier>
			<Abstract type="html">The attributes to be returned in the result. You can retrieve all item
attributes, specific item attributes, the count of matching items, or
in the case of an index, some or all of the attributes projected into
the index. &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt;: Returns all of
the item attributes. For a table, this is the default. For an index,
this mode causes Amazon DynamoDB to fetch the full item from the table
for each matching item in the index. If the index is configured to
project all item attributes, the matching items will not be fetched
from the table. Fetching items from the table incurs additional
throughput cost and latency. &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt;: Allowed only when querying
an index. Retrieves all attributes which have been projected into the
index. If the index is configured to project all attributes, this is
equivalent to specifying &lt;i&gt;ALL_ATTRIBUTES&lt;/i&gt;. &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt;: Returns the number of matching items, rather
than the matching items themselves. &lt;/li&gt; &lt;li&gt; &lt;p&gt;
&lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt; : Returns only the attributes listed
in &lt;i&gt;AttributesToGet&lt;/i&gt;. This is equivalent to specifying
&lt;i&gt;AttributesToGet&lt;/i&gt; without specifying any value for &lt;i&gt;Select&lt;/i&gt;.
&lt;p&gt;If you are querying an index and request only attributes that are
projected into that index, the operation will read only the index and
not the table. If any of the requested attributes are not projected
into the index, Amazon DynamoDB will need to fetch each matching item
from the table. This extra fetching incurs additional throughput cost
and latency. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When neither &lt;i&gt;Select&lt;/i&gt; nor
&lt;i&gt;AttributesToGet&lt;/i&gt; are specified, Amazon DynamoDB defaults to
&lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt; when accessing a table, and
&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt; when accessing an index. You
cannot use both &lt;i&gt;Select&lt;/i&gt; and &lt;i&gt;AttributesToGet&lt;/i&gt; together in a
single request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is
&lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to
specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for
&lt;i&gt;Select&lt;/i&gt;.)
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Allowed Values: &lt;/b&gt;ALLATTRIBUTES, ALLPROJECTEDATTRIBUTES, SPECIFICATTRIBUTES, COUNT</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *select</Declaration>
			
			
			<Anchor>//api/name/select</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/select</TokenIdentifier>
			<Abstract type="html">The attributes to be returned in the result. You can retrieve all item
attributes, specific item attributes, the count of matching items, or
in the case of an index, some or all of the attributes projected into
the index. &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt;: Returns all of
the item attributes. For a table, this is the default. For an index,
this mode causes Amazon DynamoDB to fetch the full item from the table
for each matching item in the index. If the index is configured to
project all item attributes, the matching items will not be fetched
from the table. Fetching items from the table incurs additional
throughput cost and latency. &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt;: Allowed only when querying
an index. Retrieves all attributes which have been projected into the
index. If the index is configured to project all attributes, this is
equivalent to specifying &lt;i&gt;ALL_ATTRIBUTES&lt;/i&gt;. &lt;/li&gt; &lt;li&gt;
&lt;p&gt;&lt;code&gt;COUNT&lt;/code&gt;: Returns the number of matching items, rather
than the matching items themselves. &lt;/li&gt; &lt;li&gt; &lt;p&gt;
&lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt; : Returns only the attributes listed
in &lt;i&gt;AttributesToGet&lt;/i&gt;. This is equivalent to specifying
&lt;i&gt;AttributesToGet&lt;/i&gt; without specifying any value for &lt;i&gt;Select&lt;/i&gt;.
&lt;p&gt;If you are querying an index and request only attributes that are
projected into that index, the operation will read only the index and
not the table. If any of the requested attributes are not projected
into the index, Amazon DynamoDB will need to fetch each matching item
from the table. This extra fetching incurs additional throughput cost
and latency. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When neither &lt;i&gt;Select&lt;/i&gt; nor
&lt;i&gt;AttributesToGet&lt;/i&gt; are specified, Amazon DynamoDB defaults to
&lt;code&gt;ALL_ATTRIBUTES&lt;/code&gt; when accessing a table, and
&lt;code&gt;ALLPROJECTEDATTRIBUTES&lt;/code&gt; when accessing an index. You
cannot use both &lt;i&gt;Select&lt;/i&gt; and &lt;i&gt;AttributesToGet&lt;/i&gt; together in a
single request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is
&lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to
specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for
&lt;i&gt;Select&lt;/i&gt;.)
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Allowed Values: &lt;/b&gt;ALLATTRIBUTES, ALLPROJECTEDATTRIBUTES, SPECIFICATTRIBUTES, COUNT</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *select</Declaration>
			
			
			<Anchor>//api/name/select</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setAttributesToGet:</TokenIdentifier>
			<Abstract type="html">The names of one or more attributes to retrieve. If no attribute names
are specified, then all attributes will be returned. If any of the
requested attributes are not found, they will not appear in the
result. &lt;p&gt;If you are querying an index and request only attributes
that are projected into that index, the operation will read only the
index and not the table. If any of the requested attributes are not
projected into the index, Amazon DynamoDB will need to fetch each
matching item from the table. This extra fetching incurs additional
throughput cost and latency. &lt;p&gt;You cannot use both
&lt;i&gt;AttributesToGet&lt;/i&gt; and &lt;i&gt;Select&lt;/i&gt; together in a &lt;i&gt;Query&lt;/i&gt;
request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is
&lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to
specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for
&lt;i&gt;Select&lt;/i&gt;.)
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/attributesToGet</TokenIdentifier>
			<Abstract type="html">The names of one or more attributes to retrieve. If no attribute names
are specified, then all attributes will be returned. If any of the
requested attributes are not found, they will not appear in the
result. &lt;p&gt;If you are querying an index and request only attributes
that are projected into that index, the operation will read only the
index and not the table. If any of the requested attributes are not
projected into the index, Amazon DynamoDB will need to fetch each
matching item from the table. This extra fetching incurs additional
throughput cost and latency. &lt;p&gt;You cannot use both
&lt;i&gt;AttributesToGet&lt;/i&gt; and &lt;i&gt;Select&lt;/i&gt; together in a &lt;i&gt;Query&lt;/i&gt;
request, &lt;i&gt;unless&lt;/i&gt; the value for &lt;i&gt;Select&lt;/i&gt; is
&lt;code&gt;SPECIFIC_ATTRIBUTES&lt;/code&gt;. (This usage is equivalent to
specifying &lt;i&gt;AttributesToGet&lt;/i&gt; without any value for
&lt;i&gt;Select&lt;/i&gt;.)
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Length: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableArray *attributesToGet</Declaration>
			
			
			<Anchor>//api/name/attributesToGet</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setLimit:</TokenIdentifier>
			<Abstract type="html">The maximum number of items to evaluate (not necessarily the number of
matching items). If Amazon DynamoDB processes the number of items up
to the limit while processing the results, it stops the operation and
returns the matching values up to that point, and a
&lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation, so that
you can pick up where you left off. Also, if the processed data set
size exceeds 1 MB before Amazon DynamoDB reaches this limit, it stops
the operation and returns the matching values up to the limit, and a
&lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation to continue
the operation. For more information see &lt;a
azon.com/amazondynamodb/latest/developerguide/QueryAndScan.html&quot;&gt;Query
and Scan&lt;/a&gt; in the Amazon DynamoDB Developer Guide.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Range: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/limit</TokenIdentifier>
			<Abstract type="html">The maximum number of items to evaluate (not necessarily the number of
matching items). If Amazon DynamoDB processes the number of items up
to the limit while processing the results, it stops the operation and
returns the matching values up to that point, and a
&lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation, so that
you can pick up where you left off. Also, if the processed data set
size exceeds 1 MB before Amazon DynamoDB reaches this limit, it stops
the operation and returns the matching values up to the limit, and a
&lt;i&gt;LastEvaluatedKey&lt;/i&gt; to apply in a subsequent operation to continue
the operation. For more information see &lt;a
azon.com/amazondynamodb/latest/developerguide/QueryAndScan.html&quot;&gt;Query
and Scan&lt;/a&gt; in the Amazon DynamoDB Developer Guide.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Range: &lt;/b&gt;1 - &lt;br/&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSNumber *limit</Declaration>
			
			
			<Anchor>//api/name/limit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setConsistentRead:</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;true&lt;/code&gt;, then the operation uses strongly
consistent reads; otherwise, eventually consistent reads are used.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/consistentRead</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;true&lt;/code&gt;, then the operation uses strongly
consistent reads; otherwise, eventually consistent reads are used.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL consistentRead</Declaration>
			
			
			<Anchor>//api/name/consistentRead</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setKeyConditions:</TokenIdentifier>
			<Abstract type="html">The selection criteria for the query. &lt;p&gt;For a query on a table, you
can only have conditions on the table primary key attributes. You must
specify the hash key attribute name and value as an &lt;code&gt;EQ&lt;/code&gt;
condition. You can optionally specify a second condition, referring to
the range key attribute. &lt;p&gt;For a query on a secondary index, you can
only have conditions on the index key attributes. You must specify the
index hash attribute name and value as an EQ condition. You can
optionally specify a second condition, referring to the index key
range attribute. &lt;p&gt;Multiple conditions are evaluated using &quot;AND&quot;; in
other words, all of the conditions must be met in order for an item to
appear in the results results. &lt;p&gt;Each &lt;i&gt;KeyConditions&lt;/i&gt; element
consists of an attribute name to compare, along with the following:
&lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate
against the supplied attribute. This list contains exactly one value,
except for a &lt;code&gt;BETWEEN&lt;/code&gt; or &lt;code&gt;IN&lt;/code&gt; comparison, in
which case the list contains two values. &lt;note&gt; &lt;p&gt;For type Number,
value comparisons are numeric. &lt;p&gt;String value comparisons for greater
than, equals, or less than are based on ASCII character code values.
For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and
&lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code
values, see &lt;a
rs&quot;&gt;http://en.wikipedia.org/wiki/ASCII#ASCIIprintablecharacters&lt;/a&gt;.
&lt;p&gt;For Binary, Amazon DynamoDB treats each byte of the binary data as
unsigned when it compares binary values, for example when evaluating
query expressions. &lt;/note&gt; &lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;i&gt;ComparisonOperator&lt;/i&gt; - A
comparator for evaluating attributes. For example, equals, greater
than, less than, etc. &lt;p&gt;Valid comparison operators for Query:
&lt;p&gt;&lt;code&gt;EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN&lt;/code&gt; &lt;p&gt;For
information on specifying data types in JSON, see &lt;a
.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html&quot;&gt;JSON
Data Format&lt;/a&gt; in the Amazon DynamoDB Developer Guide. &lt;p&gt;The
following are descriptions of each comparison operator. &lt;ul&gt; &lt;li&gt;
&lt;p&gt;&lt;code&gt;EQ&lt;/code&gt; : Equal. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain
only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not
a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different
type than the one specified in the request, the value does not match.
For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal
&lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not equal
&lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;LE&lt;/code&gt;
: Less than or equal. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only
one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a
set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type
than the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;LT&lt;/code&gt; : Less than.
&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set).
If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than
the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;GE&lt;/code&gt; : Greater than or
equal. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set).
If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than
the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;GT&lt;/code&gt; : Greater than.
&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set).
If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than
the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;BEGINS_WITH&lt;/code&gt; : checks
for a prefix. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String or Binary (not a Number or a
set). The target attribute of the comparison must be a String or
Binary (not a Number or a set). &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;
: Greater than or equal to the first value, and less than or equal to
the second value. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; must contain two
&lt;i&gt;AttributeValue&lt;/i&gt; elements of the same type, either String,
Number, or Binary (not a set). A target attribute matches if the
target value is greater than, or equal to, the first element and less
than, or equal to, the second element. If an item contains an
&lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in
the request, the value does not match. For example,
&lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *keyConditions</Declaration>
			
			
			<Anchor>//api/name/keyConditions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/keyConditions</TokenIdentifier>
			<Abstract type="html">The selection criteria for the query. &lt;p&gt;For a query on a table, you
can only have conditions on the table primary key attributes. You must
specify the hash key attribute name and value as an &lt;code&gt;EQ&lt;/code&gt;
condition. You can optionally specify a second condition, referring to
the range key attribute. &lt;p&gt;For a query on a secondary index, you can
only have conditions on the index key attributes. You must specify the
index hash attribute name and value as an EQ condition. You can
optionally specify a second condition, referring to the index key
range attribute. &lt;p&gt;Multiple conditions are evaluated using &quot;AND&quot;; in
other words, all of the conditions must be met in order for an item to
appear in the results results. &lt;p&gt;Each &lt;i&gt;KeyConditions&lt;/i&gt; element
consists of an attribute name to compare, along with the following:
&lt;ul&gt; &lt;li&gt;&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; - One or more values to evaluate
against the supplied attribute. This list contains exactly one value,
except for a &lt;code&gt;BETWEEN&lt;/code&gt; or &lt;code&gt;IN&lt;/code&gt; comparison, in
which case the list contains two values. &lt;note&gt; &lt;p&gt;For type Number,
value comparisons are numeric. &lt;p&gt;String value comparisons for greater
than, equals, or less than are based on ASCII character code values.
For example, &lt;code&gt;a&lt;/code&gt; is greater than &lt;code&gt;A&lt;/code&gt;, and
&lt;code&gt;aa&lt;/code&gt; is greater than &lt;code&gt;B&lt;/code&gt;. For a list of code
values, see &lt;a
rs&quot;&gt;http://en.wikipedia.org/wiki/ASCII#ASCIIprintablecharacters&lt;/a&gt;.
&lt;p&gt;For Binary, Amazon DynamoDB treats each byte of the binary data as
unsigned when it compares binary values, for example when evaluating
query expressions. &lt;/note&gt; &lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;i&gt;ComparisonOperator&lt;/i&gt; - A
comparator for evaluating attributes. For example, equals, greater
than, less than, etc. &lt;p&gt;Valid comparison operators for Query:
&lt;p&gt;&lt;code&gt;EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN&lt;/code&gt; &lt;p&gt;For
information on specifying data types in JSON, see &lt;a
.amazon.com/amazondynamodb/latest/developerguide/DataFormat.html&quot;&gt;JSON
Data Format&lt;/a&gt; in the Amazon DynamoDB Developer Guide. &lt;p&gt;The
following are descriptions of each comparison operator. &lt;ul&gt; &lt;li&gt;
&lt;p&gt;&lt;code&gt;EQ&lt;/code&gt; : Equal. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain
only one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not
a set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different
type than the one specified in the request, the value does not match.
For example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal
&lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;. Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not equal
&lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;, &quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;LE&lt;/code&gt;
: Less than or equal. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only
one &lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a
set). If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type
than the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;LT&lt;/code&gt; : Less than.
&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set).
If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than
the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;GE&lt;/code&gt; : Greater than or
equal. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set).
If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than
the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;GT&lt;/code&gt; : Greater than.
&lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String, Number, or Binary (not a set).
If an item contains an &lt;i&gt;AttributeValue&lt;/i&gt; of a different type than
the one specified in the request, the value does not match. For
example, &lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not equal &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt;. &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;BEGINS_WITH&lt;/code&gt; : checks
for a prefix. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; can contain only one
&lt;i&gt;AttributeValue&lt;/i&gt; of type String or Binary (not a Number or a
set). The target attribute of the comparison must be a String or
Binary (not a Number or a set). &lt;p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code&gt;BETWEEN&lt;/code&gt;
: Greater than or equal to the first value, and less than or equal to
the second value. &lt;p&gt;&lt;i&gt;AttributeValueList&lt;/i&gt; must contain two
&lt;i&gt;AttributeValue&lt;/i&gt; elements of the same type, either String,
Number, or Binary (not a set). A target attribute matches if the
target value is greater than, or equal to, the first element and less
than, or equal to, the second element. If an item contains an
&lt;i&gt;AttributeValue&lt;/i&gt; of a different type than the one specified in
the request, the value does not match. For example,
&lt;code&gt;{&quot;S&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt;.
Also, &lt;code&gt;{&quot;N&quot;:&quot;6&quot;}&lt;/code&gt; does not compare to &lt;code&gt;{&quot;NS&quot;:[&quot;6&quot;,
&quot;2&quot;, &quot;1&quot;]}&lt;/code&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt;</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *keyConditions</Declaration>
			
			
			<Anchor>//api/name/keyConditions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setScanIndexForward:</TokenIdentifier>
			<Abstract type="html">Specifies ascending (true) or descending (false) traversal of the
index. Amazon DynamoDB returns results reflecting the requested order
determined by the range key. If the data type is Number, the results
are returned in numeric order. For String, the results are returned in
order of ASCII character code values. For Binary, Amazon DynamoDB
treats each byte of the binary data as unsigned when it compares
binary values. &lt;p&gt;If &lt;i&gt;ScanIndexForward&lt;/i&gt; is not specified, the
results are returned in ascending order.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/scanIndexForward</TokenIdentifier>
			<Abstract type="html">Specifies ascending (true) or descending (false) traversal of the
index. Amazon DynamoDB returns results reflecting the requested order
determined by the range key. If the data type is Number, the results
are returned in numeric order. For String, the results are returned in
order of ASCII character code values. For Binary, Amazon DynamoDB
treats each byte of the binary data as unsigned when it compares
binary values. &lt;p&gt;If &lt;i&gt;ScanIndexForward&lt;/i&gt; is not specified, the
results are returned in ascending order.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) BOOL scanIndexForward</Declaration>
			
			
			<Anchor>//api/name/scanIndexForward</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setExclusiveStartKey:</TokenIdentifier>
			<Abstract type="html">The primary key of the first item that this operation will evaluate.
Use the value that was returned for &lt;i&gt;LastEvaluatedKey&lt;/i&gt; in the
previous operation. &lt;p&gt;The data type for &lt;i&gt;ExclusiveStartKey&lt;/i&gt; must
be String, Number or Binary. No set data types are allowed.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/exclusiveStartKey</TokenIdentifier>
			<Abstract type="html">The primary key of the first item that this operation will evaluate.
Use the value that was returned for &lt;i&gt;LastEvaluatedKey&lt;/i&gt; in the
previous operation. &lt;p&gt;The data type for &lt;i&gt;ExclusiveStartKey&lt;/i&gt; must
be String, Number or Binary. No set data types are allowed.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSMutableDictionary *exclusiveStartKey</Declaration>
			
			
			<Anchor>//api/name/exclusiveStartKey</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setReturnConsumedCapacity:</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;TOTAL&lt;/code&gt;, &lt;i&gt;ConsumedCapacity&lt;/i&gt; is included in
the response; if set to &lt;code&gt;NONE&lt;/code&gt; (the default),
&lt;i&gt;ConsumedCapacity&lt;/i&gt; is not included.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Allowed Values: &lt;/b&gt;TOTAL, NONE</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *returnConsumedCapacity</Declaration>
			
			
			<Anchor>//api/name/returnConsumedCapacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/DynamoDBQueryRequest/returnConsumedCapacity</TokenIdentifier>
			<Abstract type="html">If set to &lt;code&gt;TOTAL&lt;/code&gt;, &lt;i&gt;ConsumedCapacity&lt;/i&gt; is included in
the response; if set to &lt;code&gt;NONE&lt;/code&gt; (the default),
&lt;i&gt;ConsumedCapacity&lt;/i&gt; is not included.
&lt;p&gt;
&lt;b&gt;Constraints:&lt;/b&gt;&lt;br/&gt;
&lt;b&gt;Allowed Values: &lt;/b&gt;TOTAL, NONE</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) NSString *returnConsumedCapacity</Declaration>
			
			
			<Anchor>//api/name/returnConsumedCapacity</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/init</TokenIdentifier>
			<Abstract type="html">Default constructor for a new QueryRequest object.  Callers should use the
property methods to initialize this object after creating it.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (id)init</Declaration>
			
			
			<Anchor>//api/name/init</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/initWithTableName:</TokenIdentifier>
			<Abstract type="html">Constructs a new QueryRequest object.
Callers should use properties to initialize any additional object members.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (id)initWithTableName:(NSString *)theTableName</Declaration>
			<Parameters>
				<Parameter>
					<Name>theTableName</Name>
					<Abstract type="html">The name of the table containing the requested
items.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithTableName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/addAttributesToGet:</TokenIdentifier>
			<Abstract type="html">Adds a single object to attributesToGet.
This function will alloc and init attributesToGet if not already done.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (void)addAttributesToGet:(NSString *)attributesToGetObject</Declaration>
			
			
			<Anchor>//api/name/addAttributesToGet:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setKeyConditionsValue:forKey:</TokenIdentifier>
			<Abstract type="html">Set a value in the dictionary keyConditions for the specified key.
This function will alloc and init keyConditions if not already done.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (void)setKeyConditionsValue:(DynamoDBCondition *)theValue forKey:(NSString *)theKey</Declaration>
			
			
			<Anchor>//api/name/setKeyConditionsValue:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/setExclusiveStartKeyValue:forKey:</TokenIdentifier>
			<Abstract type="html">Set a value in the dictionary exclusiveStartKey for the specified key.
This function will alloc and init exclusiveStartKey if not already done.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (void)setExclusiveStartKeyValue:(DynamoDBAttributeValue *)theValue forKey:(NSString *)theKey</Declaration>
			
			
			<Anchor>//api/name/setExclusiveStartKeyValue:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/DynamoDBQueryRequest/description</TokenIdentifier>
			<Abstract type="html">Returns a string representation of this object; useful for testing and
debugging.</Abstract>
			<DeclaredIn>DynamoDBQueryRequest.h</DeclaredIn>			
			
			<Declaration>- (NSString *)description</Declaration>
			
			<ReturnValue><Abstract type="html">A string representation of this object.</Abstract></ReturnValue>
			<Anchor>//api/name/description</Anchor>
		</Token>
		
	</File>
</Tokens>